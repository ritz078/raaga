diff --git a/node_modules/@tonejs/midi/dist/Midi.js b/node_modules/@tonejs/midi/dist/Midi.js
index 13fb4a7..278873e 100644
--- a/node_modules/@tonejs/midi/dist/Midi.js
+++ b/node_modules/@tonejs/midi/dist/Midi.js
@@ -54,6 +54,7 @@ var Midi = /** @class */ (function () {
             if (midiArray instanceof ArrayBuffer) {
                 midiArray = new Uint8Array(midiArray);
             }
+            debugger
             midiData = midi_file_1.parseMidi(midiArray);
             // add the absolute times to each of the tracks
             midiData.tracks.forEach(function (track) {
diff --git a/node_modules/@tonejs/midi/dist/Track.js b/node_modules/@tonejs/midi/dist/Track.js
index 39d1d6c..78abb6d 100644
--- a/node_modules/@tonejs/midi/dist/Track.js
+++ b/node_modules/@tonejs/midi/dist/Track.js
@@ -23,6 +23,8 @@ var Track = /** @class */ (function () {
         /**
          * The control change events
          */
+        this.channel = trackData.filter(track => !track.meta)[0] ? trackData.filter(track => !track.meta)[0].channel : 0;
+
         this.controlChanges = ControlChanges_1.createControlChanges();
         privateHeaderMap.set(this, header);
         if (trackData) {
@@ -31,7 +33,6 @@ var Track = /** @class */ (function () {
         }
         /** @type {Instrument} */
         this.instrument = new Instrument_1.Instrument(trackData, this);
-        this.channel = 0;
         if (trackData) {
             var noteOns = trackData.filter(function (event) { return event.type === "noteOn"; });
             var noteOffs = trackData.filter(function (event) { return event.type === "noteOff"; });
@@ -118,6 +119,7 @@ var Track = /** @class */ (function () {
         enumerable: true,
         configurable: true
     });
+
     Object.defineProperty(Track.prototype, "durationTicks", {
         /**
          * The end time of the last event in the track in ticks
